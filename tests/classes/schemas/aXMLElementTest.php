<?php
require_once dirname(__FILE__) . '/../../../curation_tool.inc';

/**
 * Test class for aXMLElement.
 * Generated by PHPUnit on 2011-11-05 at 03:07:04.
 */
class aXMLElementTest extends PHPUnit_Framework_TestCase {

  /**
   * @var aXMLElement
   */
  protected $object;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp() {
//    $this->object = new aXMLElement;
    $this->object = $this->getMockForAbstractClass('aXMLElement');
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown() {
  }
  
  /**
   * 
   */
  public function testValidID() {
    $this->assertTrue($this->object->validate_id('validID'));
  }
  
  /**
   * 
   */
  public function testInvalidID() {
    $this->assertFalse($this->object->validate_id('0badID'));
  }
  
  public function testValidName() {
    $this->assertTrue($this->object->validate_element_name('valid'));
    $this->assertTrue($this->object->validate_element_name('pre:valid'));
  }
  
  public function testInvalidName() {
    $this->assertFalse($this->object->validate_element_name('xmlinvalid'));
    $this->assertFalse($this->object->validate_element_name('0invalid'));
    $this->assertFalse($this->object->validate_element_name('<invalid>'));
    
  }
  
  /**
   * 
   */
  public function testAttribute() {
    $this->assertFalse($this->object->isset_attributes());
    
    $name1 = 'attone';
    $name2 = 'atttwo';
    $value1 = 'val1';
    $value2 = 'val2';
    
    $this->object->add_attribute($name1, $value1);
    $this->object->add_attribute($name2, $value2);
    $atts = $this->object->get_attributes();
    
    $this->assertTrue($this->object->isset_attributes());
    $this->assertEquals(2, sizeof($atts));
    $this->assertEquals($value1, $atts[$name1]);
    $this->assertEquals($value2, $this->object->get_attribute($name2));
    $this->assertFalse($this->object->get_attribute('invalid'));
    
    $this->object->unset_attributes();
    
    $this->assertFalse($this->object->isset_attributes());
  }
  
  public function testNamespaces() {
    $this->assertFalse($this->object->isset_namespaces());
    
    $uri1 = 'test';
    $namespace1 = new XMLNameSpace();
    $namespace1->set_uri($uri1);
    
    $uri2 = 'anotherTest';
    $namespace2 = new XMLNameSpace();
    $namespace2->set_uri($uri2);
    
    $this->object->add_namespace($namespace1);
    $this->object->add_namespace($namespace2);
    $namespaces = $this->object->get_namespaces();
    
    $this->assertTrue($this->object->isset_namespaces());
    $this->assertEquals(get_class($namespace1), get_class($namespaces[$uri1]));
    $this->assertEquals(get_class($namespace2), 
            get_class($this->object->get_namespace($uri2)));
    $this->assertFalse($this->object->get_namespace('invalid'));
    
    $this->object->unset_namespaces();
    $this->assertFalse($this->object->isset_namespaces());
  }
  
  /**
   * 
   */
  public function testXMLVersion() {
    $this->assertEquals(1.0, $this->object->get_XMLVersion());
    
    $value = 2.0;
    $this->object->set_XMLVersion($value);
    $this->assertEquals($value, $this->object->get_XMLVersion());
  }
  
  /**
   * 
   */
  public function testXMLEncoding() {
    $this->assertEquals('UTF-8', $this->object->get_XMLEncoding());
    
    $value = 'test';
    $this->object->set_XMLEncoding($value);
    
    $this->assertEquals($value, $this->object->get_XMLEncoding());
  }
}

?>