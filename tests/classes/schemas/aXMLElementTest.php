<?php

require_once dirname(__FILE__) . '/../../../classes/schemas/aXMLElement.php';

/**
 * Test class for aXMLElement.
 * Generated by PHPUnit on 2011-11-05 at 03:07:04.
 */
class aXMLElementTest extends PHPUnit_Framework_TestCase {

  /**
   * @var aXMLElement
   */
  protected $object;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp() {
    $this->object = $this->getMockForAbstractClass('aXMLElement');
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown() {
  }
  
  /**
   * 
   */
  public function testValidID() {
    $this->assertTrue($this->object->validate_id('validID'));
  }
  
  public function testInvalidID() {
    $this->assertFalse($this->object->validate_id('0badID'));
  }
  
  public function testAttribute() {
    $this->assertFalse($this->object->isset_attributes());
    
    $name = 'attribute';
    $value = 'test';
    $name2 = 'attribute2';
    $value2 = 'test2';
    $value3 = 'test3';
    
    $this->object->add_attribute($name, $value);
    $this->object->add_attribute($name2, $value2);
    $atts = $this->object->get_attributes();
    
    $this->assertEquals(2, sizeof($atts));
    $this->assertTrue($this->object->isset_attributes());
    $this->assertEquals($value, $this->object->get_attribute($name));
    $this->assertEquals($value, $atts[$name]);
    
    $this->assertFalse($this->object->get_attribute('foobar'));
    
    $this->object->add_attribute($name, $value3);
    $atts = $this->object->get_attributes();
    $this->assertEquals($value3, $atts[$name]);
    
    $this->object->unset_attributes();
    $this->assertFalse($this->object->isset_attributes());
  }

  public function testNamespace() {
    $this->assertFalse($this->object->isset_namespaces());
    
    $defaultNamespace = new XMLNamespace();
    $defaultNamespace->uri = 'example.com/bob';
    
    $qualifiedNamespace = new XMLNamespace();
    $qualifiedNamespace->uri = 'example.com/qualified';
    $qualifiedNamespace->prefix = 'prefix';
    $qualifiedNamespace->location = 'example.com/qualified.xsd';
    
    $this->object->add_namespace($defaultNamespace);
    $this->object->add_namespace($qualifiedNamespace);
    
    $this->assertTrue($this->object->isset_namespaces());
    
    $namespaces = $this->object->get_namespaces();
    
    $this->assertEquals(2, sizeof($namespaces));
    
    $this->assertEquals($defaultNamespace->uri, $namespaces[$defaultNamespace->uri]->uri);
    $this->assertEquals($qualifiedNamespace->uri, 
            $namespaces[$qualifiedNamespace->uri.':'.$qualifiedNamespace->prefix]->uri);
    $this->assertEquals($qualifiedNamespace->prefix, 
            $namespaces[$qualifiedNamespace->uri.':'.$qualifiedNamespace->prefix]->prefix);
    $this->assertEquals($qualifiedNamespace->location, 
            $namespaces[$qualifiedNamespace->uri.':'.$qualifiedNamespace->prefix]->location);
  }
}

?>
