<?php

require_once dirname(__FILE__) . '/../../../../curation_tool.inc';

/**
 * Test class for MetadataWrap.
 * Generated by PHPUnit on 2011-11-07 at 17:05:40.
 */
class MetadataWrapTest extends PHPUnit_Framework_TestCase {

  /**
   * @var MetadataWrap
   */
  protected $object;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp() {
    $this->object = new MetadataWrap;
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown() {
    
  }

  /**
   * 
   */
  public function testMimeType() {
    $this->assertFalse($this->object->isset_mimeType());
    
    $value = 'test';
    $this->object->set_mimeType($value);
    $this->assertTrue($this->object->isset_mimeType());
    $this->assertEquals($value, $this->object->get_mimeType());
  }

  /**
   * 
   */
  public function testTextInfo() {
    $this->assertFalse($this->object->isset_textInfo());
    
    $value = 'test';
    $this->object->set_textInfo($value);
    $this->assertTrue($this->object->isset_textInfo());
    $this->assertEquals($value, $this->object->get_textInfo());
  }

  /**
   * 
   */
  public function testVocabularyName() {
    $this->assertFalse($this->object->isset_vocabularyName());
    
    $value = 'test';
    $this->object->set_vocabularyName($value);
    $this->assertTrue($this->object->isset_vocabularyName());
    $this->assertEquals($value, $this->object->get_vocabularyName());
  }
  
  /**
   * 
   */
  public function testGet_as_DOM_xmlData() {
    $dom = new DOMDocument('1.0', 'UTF-8');
    
    $expectedElement = $dom->createElement('metadataWrap');
    $expectedElement->appendChild($data = $dom->createElement('xmlData'));
    $data->appendChild($any = $dom->createElement('stuff'));
    
    $xmlData = new XMLData();
    $xmlData->set_any($any);
    $this->object->set_XMLData($xmlData);
    
    $this->assertEqualXMLStructure($expectedElement, $dom->importNode($this->object->get_as_DOM(), TRUE), TRUE);
  }
  
  /**
   * 
   */
  public function testGet_as_DOM_binaryData() {
    $dom = new DOMDocument('1.0', 'UTF-8');
    
    $expectedElement = $dom->createElement('metadataWrap');
    $expectedElement->appendChild($binaryData = $dom->createElement('binaryData'));
    $binaryData->appendChild($dom->createTextNode('test'));
    
    $this->object->set_binaryData('test');
    
    $this->assertEqualXMLStructure($expectedElement, $dom->importNode($this->object->get_as_DOM(), TRUE), TRUE);
  }
  
  /**
   * @expectedException InvalidArgumentException
   */
  public function testCheckXmlBinaryData() {
    $this->object->set_XMLData(new XMLData());
    $this->object->set_binaryData('test');
    
    $this->object->get_as_DOM();
  }

}

?>
