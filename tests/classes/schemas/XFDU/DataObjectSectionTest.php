<?php

require_once dirname(__FILE__) . '/../../../../classes/schemas/XFDU/DataObjectSection.php';

/**
 * Test class for DataObjectSection.
 * Generated by PHPUnit on 2011-11-08 at 04:30:24.
 */
class DataObjectSectionTest extends PHPUnit_Framework_TestCase {

  /**
   * @var DataObjectSection
   */
  protected $object;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp() {
    $this->object = new DataObjectSection;
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown() {
    
  }

  /**
   * 
   */
  public function testDataObject() {
    $this->assertFalse($this->object->isset_dataObjects());
    
    $value = new DataObject();
    $this->object->add_dataObject($value);
    $this->object->add_dataObject($value);
    
    $this->assertTrue($this->object->isset_dataObjects());
    $objs = $this->object->get_dataObjects();
    $this->assertEquals(2, sizeof($objs));
    $this->assertEquals(get_class($value), get_class($objs[0]));
    
    $this->object->unset_dataObjects();
    $this->assertFalse($this->object->isset_dataObjects());
    
  }
  
  /**
   * 
   */
  public function testGet_as_DOM() {
    $dom = new DOMDocument('1.0', 'UTF-8');
    $doID1 = 'doID1';
    $doID2 = 'doID2';
    
    $expectedElement = $dom->createElement('dataObjectSection');
    $expectedElement->appendChild($expectedDataObject1 = $dom->createElement('dataObject'));
    $expectedElement->appendChild($expectedDataObject2 = $dom->createElement('dataObject'));
    $expectedDataObject1->setAttribute('ID', $doID1);
    $expectedDataObject2->setAttribute('ID', $doID2);
    $expectedDataObject1->appendChild($dom->createElement('byteStream'));
    $expectedDataObject2->appendChild($dom->createElement('byteStream'));
    
    $bytestream = new ByteStream();
    
    $dataObject1 = new DataObject();
    $dataObject1->set_id($doID1);
    $dataObject1->add_bytstream($bytestream);
    
    $dataObject2 = new DataObject();
    $dataObject2->set_id($doID2);
    $dataObject2->add_bytstream($bytestream);
    
    $this->object->add_dataObject($dataObject1);
    $this->object->add_dataObject($dataObject2);
    
    $this->assertEqualXMLStructure($expectedElement, $dom->importNode($this->object->get_as_DOM(), TRUE), TRUE);
  }
  
  /**
   * @expectedException RequiredElementException
   */
  public function testMissingDataObjects() {
    $this->object->get_as_DOM();
  }

}

?>
