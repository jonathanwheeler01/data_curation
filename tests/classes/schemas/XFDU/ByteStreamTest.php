<?php

require_once dirname(__FILE__) . '/../../../../curation_tool.inc';

/**
 * Test class for ByteStream.
 * Generated by PHPUnit on 2011-11-08 at 00:06:54.
 */
class ByteStreamTest extends PHPUnit_Framework_TestCase {

  /**
   * @var ByteStream
   */
  protected $object;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp() {
    $this->object = new ByteStream;
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown() {
    
  }
  
  public function testChecksum() {
    $this->assertFalse($this->object->isset_checksum());
    
    $value = new ChecksumInformation();
    $this->object->set_checksum($value);
    
    $this->assertTrue($this->object->isset_checksum());
    $this->assertEquals(get_class($value), get_class($this->object->get_checksum()));
  }
  
  public function testFileContent() {
    $this->assertFalse($this->object->isset_fileContent());
    
    $value = new FileContent();
    $this->object->set_fileContent($value);
    
    $this->assertTrue($this->object->isset_fileContent());
    $this->assertEquals(get_class($value), get_class($this->object->get_fileContent()));
  }
  
  public function testFileLocations() {
    $this->assertFalse($this->object->isset_fileLocations());
    
    $value = new Reference();
    $this->object->add_fileLocation($value);
    $this->object->add_fileLocation($value);
    $objs = $this->object->get_fileLocations();
    
    $this->assertTrue($this->object->isset_fileLocations());
    $this->assertEquals(2, sizeof($objs));
    $this->assertEquals(get_class($value), get_class($objs[0]));
    
    $this->object->unset_fileLocations();
    $this->assertFalse($this->object->isset_fileLocations());
  }
  
  public function testID() {
    $this->assertFalse($this->object->isset_id());
    
    $value='test';
    $this->object->set_id($value);
    
    $this->assertTrue($this->object->isset_id());
    $this->assertEquals($value, $this->object->get_id());
  }
  
  /**
   * @expectedException InvalidIDTokenException
   */
  public function testInvalidID() {
    $this->object->set_id('0invalid');
  }
  
  /**
   * 
   */
  public function testMimeType() {
    $this->assertFalse($this->object->isset_mimeType());
    
    $value = 'test';
    $this->object->set_mimeType($value);
    
    $this->assertTrue($this->object->isset_mimeType());
    $this->assertEquals($value, $this->object->get_mimeType());
  }
  
  /**
   * 
   */
  public function testSize() {
    $this->assertFalse($this->object->isset_size());
    
    $value = 43;
    $this->object->set_size($value);
    
    $this->assertTrue($this->object->isset_size());
    $this->assertEquals($value, $this->object->get_size());
  }
  
  /**
   * @expectedException InvalidArgumentException
   */
  public function testInvalidSize() {
    $this->object->set_size('bad');
  }
}

?>
