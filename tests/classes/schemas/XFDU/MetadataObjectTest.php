<?php

require_once dirname(__FILE__) . '/../../../../curation_tool.inc';

/**
 * Test class for MetadataObject.
 * Generated by PHPUnit on 2011-11-07 at 02:09:38.
 */
class MetadataObjectTest extends PHPUnit_Framework_TestCase {

  /**
   * @var MetadataObject
   */
  protected $object;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp() {
    $this->object = new MetadataObject;
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown() {
    
  }
  
  /**
   * 
   */
  public function testCategory() {
    $this->assertFalse($this->object->isset_category());
    
    $value = 'REP';
    $this->object->set_category($value);
    $this->assertTrue($this->object->isset_category());
    $this->assertEquals($value, $this->object->get_category());
  }
  
  /**
   * @expectedException InvalidArgumentException
   */
  public function testInvalidCategory() {
    $this->object->set_category('invalid');
  }
  
  /**
   * 
   */
  public function testOtherCategory() {
    $this->assertFalse($this->object->isset_otherCategory());
    
    $value = 'test';
    $this->object->set_otherCategory($value);
    $this->assertTrue($this->object->isset_otherCategory());
    $this->assertEquals($value, $this->object->get_otherCategory());
  }
  
  /**
   * 
   */
  public function testClassification() {
    $this->assertFalse($this->object->isset_classification());
    
    $value = 'CONTEXT';
    $this->object->set_classification($value);
    $this->assertTrue($this->object->isset_classification());
    $this->assertEquals($value, $this->object->get_classification());
  }
  
  /**
   * @expectedException InvalidArgumentException
   */
  public function testInvalidClassification() {
    $this->object->set_classification('invalid');
  }
  
  /**
   * 
   */
  public function testOtherClass() {
    $this->assertFalse($this->object->isset_otherClass());
    
    $value = 'test';
    $this->object->set_otherClass($value);
    $this->assertTrue($this->object->isset_otherClass());
    $this->assertEquals($value, $this->object->get_otherClass());
  }
  
  /**
   * 
   */
  public function testDataObjectPointer() {
    $this->assertFalse($this->object->isset_dataObjectPointer());
    
    $value = new DataObjectPointer();
    $this->object->set_dataObjectPointer($value);
    $this->assertTrue($this->object->isset_dataObjectPointer());
    $this->assertEquals(get_class($value), get_class($this->object->get_dataObjectPointer()));
  }
  
  
  /**
   * 
   */
  public function testID() {
    $this->assertFalse($this->object->isset_id());
    
    $value = 'test';
    $this->object->set_id($value);
    $this->assertTrue($this->object->isset_id());
    $this->assertEquals($value, $this->object->get_id());
  }
  
  /**
   * @expectedException InvalidIDTokenException
   */
  public function testInvalidID() {
    $this->object->set_id('0Invalid');
  }
  
  /**
   * 
   */
  public function testMetadataWrap() {
    $this->assertFalse($this->object->isset_metadataWrap());
    
    $value = new MetadataWrap();
    $this->object->set_metadataWrap($value);
    $this->assertTrue($this->object->isset_metadataWrap());
    $this->assertEquals(get_class($value), get_class($this->object->get_metadataWrap()));
  }
  
  public function testMetadataReference() {
    $this->assertFalse($this->object->isset_metadataReference());
    
    $value = new MetadataReference();
    $this->object->set_metadataReference($value);
    $this->assertTrue($this->object->isset_metadataReference());
    $this->assertEquals(get_class($value), get_class($this->object->get_metadataReference()));
  }
  
  /**
   * 
   */
  public function testGet_as_DOM() {
    $dom = new DOMDocument('1.0', 'UTF-8');
    
    $id = 'moID';
    $category = 'ANY';
    $classification = 'CONTEXT';
    $otherCategory = 'otherCat';
    $otherClass = 'otherClass';
    $dataObjectID = 'dataObjectID';
    $locatorType = 'URL';
    
    $metadataReference = new MetadataReference();
    
    $expectedElement = $dom->createElement('metadataObject');
    $expectedElement->setAttribute('ID', $id);
    $expectedElement->setAttribute('category', $category);
    $expectedElement->setAttribute('classification', $classification);
    $expectedElement->setAttribute('otherCategory', $otherCategory);
    $expectedElement->setAttribute('otherClass', $otherClass);
    
    $expectedElement->appendChild(
            $expectedMetadataReference = $dom->createElement('metadataReference'));
    $expectedMetadataReference->setAttribute('locatorType', $locatorType);
    
    $expectedElement->appendChild(
            $expectedMetadataWrap = $dom->createElement('metadataWrap'));
    
    $expectedElement->appendChild(
            $expectedDataObjectPointer = $dom->createElement('dataObjectPointer'));
    $expectedDataObjectPointer->setAttribute('dataObjectID', $dataObjectID);
    
    $this->object->set_id($id);
    $this->object->set_category($category);
    $this->object->set_classification($classification);
    $this->object->set_otherCategory($otherCategory);
    $this->object->set_otherClass($otherClass);
    
    $metadataReference = new MetadataReference();
    $metadataReference->set_locatorType($locatorType);
    $this->object->set_metadataReference($metadataReference);
    
    $metadataWrap = new MetadataWrap();
    $this->object->set_metadataWrap($metadataWrap);
    
    $dataObjectPointer = new DataObjectPointer();
    $dataObjectPointer->set_dataObjectID($dataObjectID);
    $this->object->set_dataObjectPointer($dataObjectPointer);
    
    $this->assertEqualXMLStructure($expectedElement, $dom->importNode($this->object->get_as_DOM(), TRUE), TRUE);
  }
  
  /**
   * @expectedException RequiredElementException
   */
  public function testMissingID() {
    $this->object->get_as_DOM();
  }

  /**
   * @expectedException InvalidArgumentException
   */
  public function testInvalidCategoryGet_as_DOM() {
    $id = 'moID';
    $category = 'INVALID';
    
    $this->object->set_id($id);
    $this->object->set_category($category);
  }

  /**
   * @expectedException InvalidArgumentException
   */
  public function testInvalidClassificationGet_as_DOM() {
    $id = 'moID';
    $classification = 'INVALID';
    
    $this->object->set_id($id);
    $this->object->set_classification($classification);
  }
}

?>
