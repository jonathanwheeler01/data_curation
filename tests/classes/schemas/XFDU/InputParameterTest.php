<?php

require_once dirname(__FILE__) . '/../../../../classes/schemas/XFDU/InputParameter.php';

/**
 * Test class for InputParameter.
 * Generated by PHPUnit on 2011-11-08 at 06:46:56.
 */
class InputParameterTest extends PHPUnit_Framework_TestCase {

  /**
   * @var InputParameter
   */
  protected $object;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp() {
    $this->object = new InputParameter;
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown() {
    
  }

  /**
   * 
   */
  public function testContent() {
    $this->assertFalse($this->object->isset_content());
    
    $value = new DataObjectPointer();
    $this->object->set_content($value);
    
    $this->assertTrue($this->object->isset_content());
    $this->assertEquals(get_class($value), get_class($this->object->get_content()));
  }

  /**
   * 
   */
  public function testName() {
    $this->assertFalse($this->object->isset_name());
    
    $value = 'test';
    $this->object->set_name($value);
    
    $this->assertTrue($this->object->isset_name());
    $this->assertEquals($value, $this->object->get_name());
  }

  /**
   * 
   */
  public function testValue() {
    $this->assertFalse($this->object->isset_value());
    
    $value = 'test';
    $this->object->set_value($value);
    
    $this->assertTrue($this->object->isset_value());
    $this->assertEquals($value, $this->object->get_value());
  }
  
  /**
   * @expectedException InvalidArgumentException
   */
  public function testInvalidValueObject() {
    $value = new DummySchema();
    
    $this->object->set_value($value);
  }
  
  
  /**
   * 
   */
  public function testGet_as_DOM_TextValue() {
    $dom = new DOMDocument('1.0', 'UTF-8');
    $name = 'name';
    $value = 'value';
    
    $expectedElement = $dom->createElement('inputParameter');
    $expectedElement->setAttribute('name', $name);
    $expectedElement->appendChild($dom->createTextNode($value));
    
    $this->object->set_name($name);
    $this->object->set_value($value);
    
    $actualElement = $this->object->get_as_DOM();
    
    $this->assertEqualXMLStructure($expectedElement, $actualElement, TRUE);
  }
  
  /**
   * 
   */
  public function testGet_as_DOM_DataObjectPointerValue() {
    $dom = new DOMDocument('1.0', 'UTF-8');
    $name = 'name';
    $dataObjectID = 'doid';
    $value = new DataObjectPointer();
    $value->set_dataObjectID($dataObjectID);
    
    $expectedElement = $dom->createElement('inputParameter');
    $expectedElement->setAttribute('name', $name);
    $expectedElement->appendChild($expectedDataObjectPointer = $dom->createElement('dataObjectPointer'));
    $expectedDataObjectPointer->setAttribute('dataObjectID', $dataObjectID);
    
    $this->object->set_name($name);
    $actualDataObjectPointer = new DataObjectPointer();
    $actualDataObjectPointer->set_dataObjectID($dataObjectID);
    $this->object->set_value($value);
    
    $actualElement = $dom->importNode($this->object->get_as_DOM(), TRUE);
    
    $this->assertEqualXMLStructure($expectedElement, $actualElement, TRUE);
  }
  
  /**
   * @expectedException RequiredElementException
   */
  public function testMissingLocatorType() {
    $this->object->get_as_DOM();
  }
}

?>
