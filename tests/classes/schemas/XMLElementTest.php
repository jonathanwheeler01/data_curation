<?php

require_once dirname(__FILE__) . '/../../../classes/schemas/XMLElement.php';

/**
 * Test class for XMLElement.
 * Generated by PHPUnit on 2011-11-12 at 07:15:15.
 */
class XMLElementTest extends PHPUnit_Framework_TestCase {

  /**
   * @var XMLElement
   */
  protected $object;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp() {
    $this->object = new XMLElement('test');
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown() {
    
  }

  /**
   * 
   */
  public function testName() {
    $this->assertEquals('test', $this->object->get_name());
    
    $this->object->set_name('test2');
    $this->assertEquals('test2', $this->object->get_name());
  }

  /**
   * @todo Implement testSet_value().
   */
  public function testValue() {
    $this->assertFalse($this->object->isset_value());
    
    $value = 'test';
    $this->object->set_value($value);
    
    $this->assertTrue($this->object->isset_value());
    $this->assertEquals($value, $this->object->get_value());
  }

  /**
   * 
   */
  public function testGet_as_DOM_no_value() {
    $dom = new DOMDocument(1.0, 'UTF-8');
    $actual = $dom->createElement('temp');
    $actual = $this->object->get_as_DOM();
    
    $expected = $dom->createElement('test');
    
    $this->assertEqualXMLStructure($expected, $this->object->get_as_DOM());
  }

  /**
   * 
   */
  public function testGet_as_DOM_with_value() {
    $this->object->set_value('testValue');
    
    $dom = new DOMDocument(1.0, 'UTF-8');
    $actual = $dom->createElement('temp');
    $actual = $this->object->get_as_DOM();
    
    $expected = $dom->createElement('test');
    $expected->appendChild($dom->createTextNode('testValue'));
    
    $this->assertEqualXMLStructure($expected, $this->object->get_as_DOM());
  }
  
  /**
   * 
   */
  public function testGet_as_DOM_attributes() {
    $dom = new DOMDocument(1.0, 'UTF-8');
    $expected = $dom->createElement('test');
    
    $atts = array('att1' => 'val1', 'att2' => 'val2');
    foreach($atts as $name => $value) {
      $this->object->add_attribute($name, $value);
      $expected->setAttribute($name, $value);
    }
    
    $this->assertEqualXMLStructure($expected, $this->object->get_as_DOM(), TRUE);
  }
  
  /**
   * 
   */
  public function test_DefaultNamespace() {
    $dom = new DOMDocument(1.0, 'UTF-8');
    $expected = $dom->createElement('test');
    
    $namespace = new XMLNamespace();
    $namespace->uri = 'example.com/namespace';
    
    $this->object->add_namespace($namespace);
    
    $expected->setAttribute('xmlns', $namespace->uri);
    
    $this->assertEqualXMLStructure($expected, $this->object->get_as_DOM(), TRUE);
  }
  
  /**
   * 
   */
  public function testQualifiedNamespace() {
    $dom = new DOMDocument(1.0, 'UTF-8');
    $expected = $dom->createElement('test');
    
    $namespace = new XMLNamespace();
    $namespace->uri = 'example.com/namespace';
    $namespace->prefix = 'prefix';
    
    $this->object->add_namespace($namespace);
    
    $expected->setAttribute('xmlns:'.$namespace->prefix, $namespace->uri);
    
    $this->assertEqualXMLStructure($expected, $this->object->get_as_DOM(), TRUE);
  }
  
  /**
   * 
   */
  public function testSchemaLocation() {
    $dom = new DOMDocument(1.0, 'UTF-8');
    $expected = $dom->createElement('test');
    
    $namespace = new XMLNamespace();
    $namespace->uri = 'example.com/namespace';
    $namespace->prefix = 'prefix';
    $namespace->location = 'example.com/foobar.xsd';
    
    $namespace2 = new XMLNamespace();
    $namespace2->uri = 'example.com/namespace2';
    $namespace2->location = 'example.com/foobar2.xsd';
    
    $this->object->add_namespace($namespace);
    $this->object->add_namespace($namespace2);
    
    $expected->setAttribute('xmlns:'.$namespace->prefix, $namespace->uri);
    $expected->setAttribute('xmlns', $namespace2->uri);
    $expected->setAttribute('xmlns:xsi', 'http://www.w3.org/2001/XMLSchema-instance');
    $expected->setAttribute('xsi:schemaLocation', 
            $namespace->uri.' '.$namespace->location.' '.
            $namespace2->uri.' '.$namespace2->location);
    
    $this->assertEqualXMLStructure($expected, $this->object->get_as_DOM(), TRUE);
  }
}

?>
