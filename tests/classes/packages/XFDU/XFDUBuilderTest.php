<?php

require_once dirname(__FILE__) . '/../../../../classes/packages/XFDU/XFDUBuilder.php';

/**
 * Test class for XFDUBuilder.
 * Generated by PHPUnit on 2012-02-15 at 23:11:17.
 */
class XFDUBuilderTest extends PHPUnit_Framework_TestCase {

  /**
   * @var XFDUBuilder
   */
  protected $object;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp() {
    $this->object = new XFDUBuilder;
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown() {
    
  }

  /**
   * @todo Implement testBuild_XFDU().
   */
  public function testBuild_XFDU() {
     $packageHeaderID = 'packageHeader';
     $impID = 'packageMap';
     $doID = 'doID';
     
     $dom = new DOMDocument('1.0', 'UTF-8');
     
    // Expected specificaiton Version 
     $expectedSpecificationVersion = $dom->createElement('specificationVersion');
     $expectedSpecificationVersion->appendChild($dom->createTextNode('1.0'));
     
     // Expected Volume Info 
     $expectedVolumeInfo = $dom->createElement('volumeInfo');
     $expectedVolumeInfo->appendChild($expectedSpecificationVersion);
     
     // Expected package header
     $expectedPackageHeader = $dom->createElement('packageHeader');
     $expectedPackageHeader->appendChild($expectedVolumeInfo);
     
     // Expected contentUnit
     $expectedContentUnit = $dom->createElement('xfdu:contentUnit');
     
     //Expected informationPackageMap
     $expectedInformationPackageMap = $dom->createElement('informationPackageMap');
     $expectedInformationPackageMap->appendChild($expectedContentUnit);
     
     //Expected metadataSection
     $expectedMetadataSection = $dom->createElement('metadataSection');
     
     // Expected Dataobject Section
     $expectedByteStream = $dom->createElement('byteStream');
     
     $expectedDataObject = $dom->createElement('dataObject');
     $expectedDataObject->setAttribute('ID', $doID);
     $expectedDataObject->appendChild($expectedByteStream);
     
     $expectedDataObjectSection = $dom->createElement('dataObjectSection');
     $expectedDataObjectSection->appendChild($expectedDataObject);
     
     //Expected behaviorSection
     $expectedBehaviorSection = $dom->createElement('behaviorSection');

    // Expected Root xfdu element
    $expectedElement = $dom->createElement('xfdu:XFDU');
    $expectedElement->setAttribute('xmlns:xfdu', 'urn:ccsds:schema:xfdu:1');
    $expectedElement->setAttribute('xmlns:xsi', 'http://www.w3.org/2001/XMLSchema-instance');
    $expectedElement->setAttribute('xsi:schemaLocation', 'urn:ccsds:schema:xfdu:1 http://sindbad.gsfc.nasa.gov/xfdu/xsd-src/xfdu.xsd');
    $expectedElement->appendChild($expectedPackageHeader);
    $expectedElement->appendChild($expectedInformationPackageMap);
    $expectedElement->appendChild($expectedMetadataSection);
    $expectedElement->appendChild($expectedDataObjectSection);
    $expectedElement->appendChild($expectedBehaviorSection);
    
    
    // Actual xfdu.
    
    $volumeInfo = $this->object->build_volumeInfo();
    $packageHeader = $this->object->build_packageHeader($packageHeaderID, $volumeInfo);
    
    $informationPackageMap = new InformationPackageMap();
    $informationPackageMap->add_contentUnit(new ContentUnit());
    $informationPackageMap->set_id($impID);
    
    $medatadataSection = new MetadataSection();
    
    $byteStream = new ByteStream();
    
    $dataObject = new DataObject();
    $dataObject->set_id($doID);
    $dataObject->add_bytstream($byteStream);
    
    $dataObjectSection = new DataObjectSection();
    $dataObjectSection->add_dataObject($dataObject);
    
    $behaviorSection = new BehaviorSection();
    
    $xfdu = $this->object->build_XFDU($packageHeader, $informationPackageMap, $medatadataSection, $dataObjectSection, $behaviorSection);
    
    $this->assertEqualXMLStructure($expectedElement, $xfdu->get_as_DOM());
  }

  /**
   * @todo Implement testBuild_packageHeader().
   */
  public function testBuild_packageHeader() {
    $dom = new DOMDocument('1.0', 'UTF-8');
    
    $expectedContentUnit1 = $dom->createElement('xfdu:contentUnit');
    $expectedContentUnit2 = $dom->createElement('xfdu:contentUnit');
    
    $expectedElement = $dom->createElement('informationPackageMap');
    $expectedElement->appendChild($expectedContentUnit1);
    $expectedElement->appendChild($expectedContentUnit2);
    
    $contentUnitList = array(new ContentUnit(), new ContentUnit());
    $informationPackageMap = $this->object->build_InformationPackageMap($contentUnitList);
    
    $this->assertEqualXMLStructure($expectedElement, $informationPackageMap->get_as_DOM(), TRUE);
  }

  /**
   * @todo Implement testBuild_InformationPackageMap().
   */
  public function testBuild_InformationPackageMap() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
            'This test has not been implemented yet.'
    );
  }

  /**
   * @todo Implement testBuild_volumeInfo().
   */
  public function testBuild_volumeInfo() {
    $version = '1.0';
    $sequenceSize = 3;
    $sequencePosition = 2;
     $dom = new DOMDocument('1.0', 'UTF-8');
    
    $expectedSpecificationVersion = $dom->createElement('specificationVersion');
    $expectedSpecificationVersion->appendChild($dom->createTextNode($version));
    
    $expectedSequenceInformation = $dom->createElement('sequenceInformation');
    $expectedSequenceInformation->setAttribute('sequencePosition', $sequencePosition);
    $expectedSequenceInformation->setAttribute('sequenceSize', $sequenceSize);
    $expectedSequenceInformation->appendChild($dom->createTextNode($sequencePosition.' of '.$sequenceSize));
    
    $expectedElement = $dom->createElement('volumeInfo');
    $expectedElement->appendChild($expectedSpecificationVersion);
    $expectedElement->appendChild($expectedSequenceInformation);
    
    $sequenceInformation = $this->object->build_SequenceInfo($sequencePosition, $sequenceSize, $sequencePosition.' of '.$sequenceSize);
    $volumeInfo = $this->object->build_volumeInfo($version, $sequenceInformation);
    
    $this->assertEqualXMLStructure($expectedElement, $volumeInfo->get_as_DOM(), TRUE);
  }

  /**
   * @todo Implement testBuild_environmentInfo().
   */
  public function testBuild_environmentInfo() {
    $dom = new DOMDocument('1.0', 'UTF-8');
    
    // Test both xmlData and extension set.
    $anyxml = $dom->createElement('anyXML');
    $specificXML = $dom->createElement('specificXML');
    $specificXML->setAttribute('xmlns', 'temp');
    
    $expectedXmlData = $dom->createElement('xmlData');
    $expectedXmlData->appendChild($anyxml);
    
    $expectedExtension = $dom->createElement('extension');
    $expectedExtension->appendChild($specificXML);
    
    $expectedElement = $dom->createElement('environmentInfo');
    $expectedElement->appendChild($expectedXmlData);
    $expectedElement->appendChild($expectedExtension);
    
    $xmlData = $this->object->build_XMLData($anyxml);
    $extension = new Extension();
    $extension->set_any($specificXML);
    $environmentInfo = $this->object->build_environmentInfo($xmlData, $extension);
    
    $this->assertEqualXMLStructure($expectedElement, $environmentInfo->get_as_DOM(), TRUE);
    
    // Test no extension
    $anyxml = $dom->createElement('anyXML');
    
    $expectedXmlData = $dom->createElement('xmlData');
    $expectedXmlData->appendChild($anyxml);
    
    $expectedElement = $dom->createElement('environmentInfo');
    $expectedElement->appendChild($expectedXmlData);
    
    $xmlData = $this->object->build_XMLData($anyxml);
    $environmentInfo = $this->object->build_environmentInfo($xmlData);
    
    $this->assertEqualXMLStructure($expectedElement, $environmentInfo->get_as_DOM(), TRUE);
    
    
    
    // Test both xmlData and extension set.
    $specificXML = $dom->createElement('specificXML');
    $specificXML->setAttribute('xmlns', 'temp');
    
    $expectedExtension = $dom->createElement('extension');
    $expectedExtension->appendChild($specificXML);
    
    $expectedElement = $dom->createElement('environmentInfo');
    $expectedElement->appendChild($expectedExtension);
    
    $xmlData = $this->object->build_XMLData($anyxml);
    $extension = new Extension();
    $extension->set_any($specificXML);
    $environmentInfo = $this->object->build_environmentInfo(NULL, $extension);
    
    $this->assertEqualXMLStructure($expectedElement, $environmentInfo->get_as_DOM(), TRUE);
  }

}

?>
