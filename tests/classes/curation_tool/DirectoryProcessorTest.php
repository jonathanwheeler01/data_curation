<?php

<<<<<<< HEAD
require_once dirname(__FILE__) . '/../../../classes/curation_tool/DirectoryProcessor.php';
require_once '/../../../curation_tool.inc';

/**
 * Test class for DirectoryProcessor.
 * Generated by PHPUnit on 2012-03-19 at 17:12:49.
=======
//require_once dirname(__FILE__) . '/../../../classes/curation_tool/DirectoryProcessor.php';
require_once dirname(__FILE__) . '/../../../curation_tool.inc';

/**
 * Test class for DirectoryProcessor.
 * Generated by PHPUnit on 2012-03-02 at 20:21:40.
>>>>>>> 4d499a24ba8d4e2a38cc882b1d0cc4c46f4fef08
 */
class DirectoryProcessorTest extends PHPUnit_Framework_TestCase {

  /**
   * @var DirectoryProcessor
   */
  protected $object;
<<<<<<< HEAD

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp() {
    $this->object = new DirectoryProcessor;

  }
  
  /**
   * creates a director system for testing. 
   */
  protected function create_test_directory() {
        
    // check the operating system to handle permissions correctly
    if(preg_match('/windows/i', php_uname('s'))) {
      $perms = 0;
    }
    else {
      $perms = 0755;
    }
    
    $currentDirectory = '/investigator/project/';
    mkdir($currentDirectory, $perms, TRUE);
    touch($currentDirectory.'data1.txt');
    touch($currentDirectory.'data2.csv');
    
    $dir1 = $currentDirectory.'images/';
    mkdir($dir1, $perms, TRUE);
    touch($dir1.'image1.png');
    touch($dir1.'image2.jpg');
    touch($dir1.'image3.gif');
    touch($dir1.'image4.tif');    
    
    $dir2 = $currentDirectory.'filetypes/';
    mkdir($dir2, $perms, TRUE);
    touch($dir2.'matlab.m');
    touch($dir2.'powerpoint.pptx');
    touch($dir2.'word.docx');
    touch($dir2.'xcel.xls');
=======
  
  protected function makeFile($filename, $contents) {
    $handle = fopen($filename, 'w');
    fwrite($handle, $contents);
    fclose($handle);
  }

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed. I found the mock directory 
   * structure extremely cumbersome, so i just create and tear down one.
   */
  protected function setUp() {
    $this->object = new DirectoryProcessor;
    
    // Create the directory structure
    $directory = 'testproj'.DIRECTORY_SEPARATOR.'datadir1'.DIRECTORY_SEPARATOR.'datadir1_1';
    mkdir($directory, 0, TRUE);
    $directory = 'testproj'.DIRECTORY_SEPARATOR.'datadir1'.DIRECTORY_SEPARATOR.'datadir1_2';
    mkdir($directory, 0, TRUE);
    $directory = 'testproj'.DIRECTORY_SEPARATOR.'datadir2';
    mkdir($directory, 0, TRUE);
           
    // add files
    $this->makeFile('barefile.txt', 'this is a bare file');
    
    $this->makeFile('testproj'.DIRECTORY_SEPARATOR.'file1.txt', 'this is file 1');
    $this->makeFile('testproj'.DIRECTORY_SEPARATOR.'file1.png', 'this is file 2');
    $this->makeFile('testproj'.DIRECTORY_SEPARATOR.'file1.csv', 'this is file 3');
    
    $this->makeFile('testproj'.DIRECTORY_SEPARATOR.'datadir1'.DIRECTORY_SEPARATOR.'datadir1_1'.DIRECTORY_SEPARATOR.'file1_1_1.txt', 'this is file 1 1 1');
    $this->makeFile('testproj'.DIRECTORY_SEPARATOR.'datadir1'.DIRECTORY_SEPARATOR.'datadir1_1'.DIRECTORY_SEPARATOR.'file1_1_2.png', 'this is file 1 1 2');
    $this->makeFile('testproj'.DIRECTORY_SEPARATOR.'datadir1'.DIRECTORY_SEPARATOR.'datadir1_1'.DIRECTORY_SEPARATOR.'file1_1_3.xsl', 'this is file 1 1 3');
    
    $this->makeFile('testproj'.DIRECTORY_SEPARATOR.'datadir1'.DIRECTORY_SEPARATOR.'datadir1_2'.DIRECTORY_SEPARATOR.'file1_2_1.txt', 'this is file 1 2 1');
    
    $this->makeFile('testproj'.DIRECTORY_SEPARATOR.'datadir2'.DIRECTORY_SEPARATOR.'file2_1.txt', 'this is file 2 1');
    $this->makeFile('testproj'.DIRECTORY_SEPARATOR.'datadir2'.DIRECTORY_SEPARATOR.'file2_2.txt', 'this is file 2 2');
>>>>>>> 4d499a24ba8d4e2a38cc882b1d0cc4c46f4fef08
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
<<<<<<< HEAD
  protected function tearDown() {    
    $this->remove_test_directory();
  }
  
  /**
   * Remove the test directory.
   */
  protected function remove_test_directory() {
    
    // test the operating system to excecute the correct shell command
    if(preg_match('/windows/i', php_uname('s'))) {
      exec('rmdir "/investigator" /s /q');
    }
    else {
      exec('rm -r /investigator');
    }
  }
  
  /**
   * 
   */
  public function testRoot() {
    $this->create_test_directory();
    $path = '/investigator/project/';
    $this->object->set_root($path);
   
    $this->assertEquals($path, $this->object->get_root());
  }

=======
  protected function tearDown() {
    // remove the directory structure and files
    exec('rmdir /s /q testproj');
    if(file_exists('barefile.txt')) {
      exec('DEL /q barefile.txt');
    }
    if(file_exists('barefile')) {
      exec('rmdir /s /q barefile');
    }
  }
  /**
   * Quick check that set and get for root works.
   */
  public function testRoot() {
    $root = 'testproj';
    $this->object->set_root($root);
    $this->assertEquals($root, $this->object->get_root());
  }
  
>>>>>>> 4d499a24ba8d4e2a38cc882b1d0cc4c46f4fef08
  /**
   * @expectedException PathNotFoundException
   */
  public function testInvalidRoot() {
<<<<<<< HEAD
    $path = '/path1/path2';
    $this->object->set_root($path);
  }
  
  /**
   * 
   */
  public function testProcessDataSet() {
    $this->create_test_directory();
    
    $path = '/investigator/project/';
    $this->object->set_root($path)
            ->process_dataset();
    
    $this->assertTrue(is_dir($path.DIRECTORY_SEPARATOR.'meta'));
    $this->assertTrue(is_dir($path.DIRECTORY_SEPARATOR.'images'.DIRECTORY_SEPARATOR.'meta'));
  }
  
  public function testProcessDataSetBareFile() {
    mkdir('/investigator');
    touch('/investigator/data.txt');
    
    $this->object->set_root('/investigator/data.txt')
            ->process_dataset();
    
    $this->assertTrue(is_dir('/investigator/data'));
    $this->assertTrue(is_file('/investigator/data/data.txt'));
    $this->assertTrue(is_dir('/investigator/data/meta'));
=======
    $root = 'invalidRoot';
    $this->object->set_root($root);
  }
  
  /**
   * Test exception is thrown if now path is specified.
   * @expectedException PathNotFoundException
   */
  public function testNoPath() {
    $this->object->process_dataset();
  }

  /**
   * 
   */
  public function testProcess_datasetBareFile() {
    $this->object->set_root('barefile.txt');
    $this->object->process_dataset();
    
    $this->assertFileExists('barefile'.DIRECTORY_SEPARATOR.'barefile.txt');
    $this->assertTrue(file_exists('barefile'.DIRECTORY_SEPARATOR.'meta'));
  }
  
  /**
   * 
   */
  public function testProcess_datasetDeepStructure() {
    $this->object->set_root('testproj');
    $this->object->process_dataset();
    
    $this->assertFileExists('testproj'.DIRECTORY_SEPARATOR.'meta');
    $this->assertFileExists('testproj'.DIRECTORY_SEPARATOR.
                            'datadir2'.DIRECTORY_SEPARATOR.'meta');
    $this->assertFileExists('testproj'.DIRECTORY_SEPARATOR.
                            'datadir1'.DIRECTORY_SEPARATOR.
                            'datadir1_2'.DIRECTORY_SEPARATOR.'meta');
  }
  
  /**
   * 
   */
  public function testPopulatedConstructor() {
    $root = 'testproj';
    $object = new DirectoryProcessor($root);
    $this->assertEquals($root, $object->get_root());
>>>>>>> 4d499a24ba8d4e2a38cc882b1d0cc4c46f4fef08
  }

}

?>
