<?php

require_once dirname(__FILE__) . '/../../../curation_tool.inc';

/**
 * Test class for CurationTool.
 * Generated by PHPUnit on 2011-10-25 at 19:07:01.
 */
class CurationToolTest extends PHPUnit_Framework_TestCase {

  /**
   * @var CurationTool
   */
  protected $object;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed. I was trying vfsstream
   * but it really wasn't working for me. So I am working with creating and
   * tearing down actual files. NOT IDEAL
   */
  protected function setUp() {
    $this->object = new CurationTool;
    $this->create_files1();
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown() {
    system('rmdir /s/q repository');
  }

  public function testEmptyConstructor() {
    $this->assertEmpty($this->object->get_root(), 'Empty Constructor.');
  }

  public function testParamaterizedConstructor() {
    $path = 'repository'.'/'.
           'user1'.'/'.
           'dataset1';

    $newObj = new CurationTool($path);
    $this->assertEquals($path, $newObj->get_root(), 'Non-empty Constructor');
  }

  /**
   * @expectedException PathNotFoundException
   */
  public function testInvalidRoot(){
    $path = 'repository'.'/'.
       'user3'.'/'.
       'dataset1';
    $newObj = new CurationTool($path);
  }

  /**
   * @todo Implement testSet_root().
   */
  public function testSet_root() {
    $path = 'repository'.DIRECTORY_SEPARATOR.
       'user2'.DIRECTORY_SEPARATOR.
       'mydata1.csv';
    $this->object->set_root($path);
    $this->assertEquals($path, $this->object->get_root(), 'Set Root');
  }


  /**
   * @expectedException PathNotFoundException
   */
  public function testNoPathProcess_dataset() {
    $this->object->process_dataset();
  }

  public function testProcess_dataset() {

    $path = 'repository'.DIRECTORY_SEPARATOR.
                            'user1'.DIRECTORY_SEPARATOR.
                            'dataset1';
    $this->object->set_root($path);
    $this->object->process_dataset();

    $this->assertFileExists($path.DIRECTORY_SEPARATOR.'meta', 'Meta directory not created for root.');

    $path = 'repository'.DIRECTORY_SEPARATOR.
                            'user1'.DIRECTORY_SEPARATOR.
                            'dataset1'.DIRECTORY_SEPARATOR.
                            'subfolder1';

    $this->assertFileExists($path.DIRECTORY_SEPARATOR.'meta', 'Meta directory not created for subfolder 1.');
  }

  public function testBareFileProcess_dataset () {
   $root = 'repository'.DIRECTORY_SEPARATOR.
       'user2'.DIRECTORY_SEPARATOR.
       'mydata1.csv';
    $this->object->set_root($root);
    $this->object->process_dataset();
    
    $pathInfo = pathinfo($root);
    $fileName = basename($root, $pathInfo['extension']);

    $this->assertFileExists($pathInfo['dirname'].DIRECTORY_SEPARATOR.$fileName.DIRECTORY_SEPARATOR.$pathInfo['basename']);
  }


  private function create_files1(){
    mkdir('repository');

    mkdir('repository'.DIRECTORY_SEPARATOR.'user1');
    mkdir('repository'.DIRECTORY_SEPARATOR.'user1'.
            DIRECTORY_SEPARATOR.'dataset1');
    mkdir('repository'.DIRECTORY_SEPARATOR.'user1'.
            DIRECTORY_SEPARATOR.'dataset1'.
            DIRECTORY_SEPARATOR.'subfolder1');
    mkdir('repository'.DIRECTORY_SEPARATOR.'user1'.
            DIRECTORY_SEPARATOR.'dataset1'.
            DIRECTORY_SEPARATOR.'subfolder2');

    $url ='repository'.DIRECTORY_SEPARATOR.'user1'.
            DIRECTORY_SEPARATOR.'dataset1';
    file_put_contents($url.DIRECTORY_SEPARATOR.'data1.txt', 'data one contents');
    file_put_contents($url.DIRECTORY_SEPARATOR.'data2.txt', 'data two contents');
    file_put_contents($url.DIRECTORY_SEPARATOR.'data3.txt', 'data three contents');
    
    $url = 'repository'.DIRECTORY_SEPARATOR.'user1'.
            DIRECTORY_SEPARATOR.'dataset1'.
            DIRECTORY_SEPARATOR.'subfolder1';

    file_put_contents($url.DIRECTORY_SEPARATOR.'subdata1.txt', 'subdata1 contents');
    file_put_contents($url.DIRECTORY_SEPARATOR.'subdata2.txt', 'subdata2 contents');

    $url = 'repository'.DIRECTORY_SEPARATOR.'user1'.
            DIRECTORY_SEPARATOR.'dataset1'.
            DIRECTORY_SEPARATOR.'subfolder2';

    file_put_contents($url.DIRECTORY_SEPARATOR.'subdata1a.txt', 'subdata1a contents');
    file_put_contents($url.DIRECTORY_SEPARATOR.'subdata2b.txt', 'subdata2b contents');


    mkdir('repository'.DIRECTORY_SEPARATOR.'user1'.
            DIRECTORY_SEPARATOR.'dataset2');

    $url ='repository'.DIRECTORY_SEPARATOR.'user1'.
            DIRECTORY_SEPARATOR.'dataset2';
    file_put_contents($url.DIRECTORY_SEPARATOR.'data1.txt', 'data four contents');
    file_put_contents($url.DIRECTORY_SEPARATOR.'data2.txt', 'data five contents');
    file_put_contents($url.DIRECTORY_SEPARATOR.'data6.txt', 'data six contents');


    mkdir('repository'.DIRECTORY_SEPARATOR.'user2');
    $url = 'repository'.DIRECTORY_SEPARATOR.'user2';
    file_put_contents($url.DIRECTORY_SEPARATOR.'mydata1.csv', 'field1, field2, field3');
    file_put_contents($url.DIRECTORY_SEPARATOR.'mydata2.txt', 'lotsa data');
  }

}

?>
